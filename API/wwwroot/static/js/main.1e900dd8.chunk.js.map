{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/models/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/Profiles/FollowButton.tsx","features/Profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/myTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationError.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/detail/ActivityDetailedChat.tsx","features/activities/detail/ActivityDetailedHeader.tsx","features/activities/detail/ActivityDetailedInfo.tsx","features/activities/detail/ActivityDetailedSidebar.tsx","features/activities/detail/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/Profiles/ProfileEditForm.tsx","features/Profiles/ProfileAbout.tsx","features/Profiles/ProfileActivities.tsx","features/Profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/Profiles/ProfilePhotos.tsx","features/Profiles/ProfileContent.tsx","features/Profiles/ProfileHeader.tsx","features/Profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predictate","listActivities","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","userName","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","currentUserProfile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","setDisplayName","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","bordered","circular","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","obSubmit","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","basiccontent","verticalAlign","relaxed","divided","ribbon","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.1e900dd8.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor ( data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 5) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { PaginatedResult } from \"../models/pagination\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/store\";\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay);\n    })\n}\n\n//axios.defaults.baseURL = 'http://localhost:5000/api';\n//adding custom environment variables\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n\n    const token = store.commonStore.token;\n    \n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => \n{\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data =  new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config}  = error.response!;\n    switch (status) {\n        case 400:\n            if(typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors){\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modalStateErrors.flat();\n            }else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            //toast.error('not found');\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n    } )\n\n\nconst responseBody = <T>(response: AxiosResponse<T>)  => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody)\n    \n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n    .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del((`/photos/${id}`)),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predictate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predictate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[];\n}\n\nexport class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n        Object.assign(this, init);\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor (activity?: ActivityFormValues) {\n        if (activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.venue = activity.venue;\n            this.city = activity.city;\n\n        }\n    }\n}","import {User} from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.userName;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial =false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n    \n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(), \n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n                }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {   \n            case 'all': \n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'isStartDate':\n                this.predicate.delete('isStartDate');\n                this.predicate.set('startDate', value);\n                break;\n        }\n    }\n\n    get axiosParams () {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate(){\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch(error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }   \n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } \n        else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                \n                this.setLoadingInitial(false);\n                return activity;\n            }\n            catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some (\n                a => a.username === user.userName\n            )\n            activity.isHost = activity.hostUsername === user.userName;\n            activity.host = activity.attendees?.find( x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n         this.loadingInitial = state;   \n    }\n    \n    createActivity = async (activity: ActivityFormValues) => {\n\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        \n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.userName;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        }catch (error){\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        \n        try{\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity)  \n                    this.selectedActivity=updatedActivity as Activity;\n                }\n            })\n        }catch (error){\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id)\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction (() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.userName);\n                    this.selectedActivity.isGoing=false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing =true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        }\n        catch (error) {\n            console.log(error);\n        } finally {\n            runInAction (() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction (() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        }\n        catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    currentUserProfile: Profile | null = null;\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab: number = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        \n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.userName === this.profile.username;\n        }\n        \n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            //console.log(username);\n            runInAction (() => {\n                this.profile = profile;\n                this.loadingProfile =false;\n            })\n            //console.log(profile);\n        } \n        catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile =false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction (() => {\n                if (this.profile)  {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } \n        catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find( p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } \n        catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction (() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.userName && this.profile.username === username) {\n                    following  ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.userName) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction (() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        }\n        catch (error) {\n            console.log(error)\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => \n    {\n        this.loadingActivities = true;\n            try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n                runInAction(() => {\n                    this.userActivities = activities;\n                    this.loadingActivities = false;\n                 })\n             } catch (error) {\n                console.log(error);\n                runInAction(() => {\n                this.loadingActivities = false;\n                })\n        } \n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !==\n                    store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        } \n    }\n\n}\n\n","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            //console.log(user);\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n}","\nimport { createContext, useContext } from \"react\";\nimport ModalStore from \"../models/modalStore\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\n\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction (\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal : Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                   comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                   }) \n                   this.comments = comments\n                }); \n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(()  => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment);\n                });\n            })\n\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error))\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any)  => {\n            values.activityId = store.activityStore.selectedActivity?.id;\n            try {\n                await this.hubConnection?.invoke('SendComment', values)\n            } catch (error) {\n                console.log(error);\n            }\n    }\n}","import { observer } from \"mobx-react-lite\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\nexport default observer(function NavBar() {\n\n    const {userStore: {user, logout}} = useStore();\n    //console.log(user);\n\nreturn (\n    <Menu inverted fixed='top'>\n        <Container>\n            <Menu.Item as={NavLink}  exact to='/' header>\n                <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px' }}/>\n                Reactivities\n            </Menu.Item>\n            <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\n            <Menu.Item as={NavLink} to='/errors' name=\"Errors\"/>\n            <Menu.Item>\n                <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\"/>\n            </Menu.Item>\n            <Menu.Item position='right'>\n                <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                <Dropdown pointing='top left' text={user?.displayName}>\n                    <Dropdown.Menu>\n                        <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} \n                            text='My Profile' icon='user' />\n                        <Dropdown.Item onClick={logout} text='logout' icon='power' />\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Menu.Item>\n            \n        </Container>\n    </Menu>\n)\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Calendar from \"react-calendar\";\nimport { Header, Menu } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n\n            </Menu>\n            <Header/>\n            <Calendar \n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\nimport { Reveal, Button } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n\n    const { profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.userName === profile.username) return null;\n\n    function handleFollow( e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n    <Reveal animated='move'>\n        <Reveal.Content visible style={{width: '100%'}}>\n            <Button \n                fluid \n                color='teal' \n                content={profile.following ? 'Following' : 'Not following'} />\n        </Reveal.Content>\n        <Reveal.Content hidden style={{width: '100%'}}>\n            <Button \n            fluid \n            basic \n            color={profile.following ? 'red' : 'green'}\n            content={profile.following ? 'Unfollow' : 'Follow'} \n            loading={loading}\n            onClick={(e) => handleFollow(e, profile.username)}\n            />\n        </Reveal.Content>\n    </Reveal>\n    )\n})\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile;\n    \n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        } \n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`} >\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name ='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../Profiles/ProfileCard';\n\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\n    const style = {\n        borderColor: 'orange',\n        borderWidth: 2\n    }\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                            <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                                <Image size='mini' \n                                bordered\n                                style={attendee.following ? style : null}\n                                circular src={attendee.image || '/assets/user.png'} />\n                            </List.Item>\n                            }\n                >\n                    <Popup.Content>\n                            <ProfileCard profile={attendee}/> \n                    </Popup.Content>    \n                </Popup>\n                \n            ))}\n        </List>\n    )\n})\n\n","import { Link } from \"react-router-dom\";\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\nimport { Activity } from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({activity}: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled && \n                <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />}\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || 'assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link> </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            \n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy hh:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='view'\n                />\n            </Segment>\n        </Segment.Group>\n\n\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport { Header } from \"semantic-ui-react\";\nimport React, { Fragment } from \"react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityListItem from \"./ActivityListItem\";\n\n\nexport default observer(function ActivityList() {\n    \n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n    \n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                        \n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity}/>\n                    ))}\n                        \n                </Fragment>\n            ))}\n        </>\n        \n    )\n    \n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport { PagingParams } from \"../../../app/models/pagination\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport ActivityList from \"./ActivityList\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceHolder\";\n\n\nexport default observer(function ActivityDashboard() {\n    \n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    },[activityRegistry.size, loadActivities] )\n  \n    //if (activityStore.loadingInitial && !loadingNext) return <LoadingComponent content='Loading activities ...'/>\n  \n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n\n                ) : (\n                    <InfiniteScroll \n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n                \n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n}) ","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { ErrorMessage, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Form, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/myTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function LoginForm() {\n\n    const {userStore} = useStore();\n\n    return (\n        <Formik \n            initialValues={{ email: '', password: '', error: null }}\n                onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                    setErrors({error: 'Invalid email or password'}))} \n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                        <MyTextInput name='email' placeholder='Email' />\n                        <MyTextInput name='password' placeholder='Password' type='password' />\n                        <ErrorMessage \n                            name='error' render={() => \n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\n                        />\n                        <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                    </Form>\n            )}\n        </Formik>\n    )\n})\n","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface Props {\n    errors: any;\n\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/myTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport ValidationErrors from \"../errors/ValidationError\";\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik \n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\n                onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                    setErrors({error}))} \n                    validationSchema={Yup.object({\n                        displayName: Yup.string().required(), \n                        username: Yup.string().required(), \n                        email: Yup.string().required().email(), \n                        password: Yup.string().required(), \n                    })}\n                    >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                    <Form className='ui form error' obSubmit={handleSubmit} autoComplete='off'>\n                        <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                        <MyTextInput name='displayName' placeholder='Display Name' />\n                        <MyTextInput name='username' placeholder='Username' />\n                        <MyTextInput name='email' placeholder='Email' />\n                        <MyTextInput name='password' placeholder='Password' type='password' />\n                        <ErrorMessage \n                            name='error' render={() => \n                            <ValidationErrors errors={errors.error}/>}\n                        />\n                        <Button disabled={!isValid || !dirty || isSubmitting} \n                            loading={isSubmitting} positive content='Register' type='submit' fluid />\n                    </Form>\n            )}\n        </Formik>\n    )\n})\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Segment, Image } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from \"../users/RegisterForm\";\n\nexport default observer(function HomePage() {\n    const {userStore, modalStore} = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                    Reactivities\n                </Header>\n                {\n                    userStore.isLoggedIn ? (\n                    <>\n                    <Header as='h2' inverted content='Welcome to Reactivities' />\n                    <Button as={Link} to='/activities' size='huge' inverted>\n                        Go to Acitvities! \n                    </Button>\n                    </>\n                ) : (\n                    <>\n                    <Button onClick={ () => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                        Login! \n                    </Button>\n                    <Button onClick={ () => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                        Register! \n                    </Button>\n                    </>        \n                )}\n                \n                \n            </Container>\n        </Segment>       \n    )\n})","import React from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n\n}\n\nexport default function LoadingComponent({inverted = true, content='Loding...'}: Props) {\n    return(\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n            clearable\n            options={props.options}\n            value={field.value || null}\n            onChange={(e,d ) => helpers.setValue(d.value)}\n            onBlur={()=> helpers.setTouched(true)} \n            placeholder={props.placeholder}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'}, \n    {text: 'Culture', value: 'culture'}, \n    {text: 'Film', value: 'film'}, \n    {text: 'Food', value: 'food'}, \n    {text: 'Music', value: 'music'}, \n    {text: 'Travel', value: 'travel'}\n]","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected = {(field.value && new Date(field.value)) || null}\n                onChange = {value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport {v4 as uuid} from 'uuid';\nimport { Formik, Form } from \"formik\";\nimport * as Yup from 'yup';//support for form validation\nimport MyTextInput from \"../../../app/common/form/myTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\n\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, \n        loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The  title is required'),\n        description: Yup.string().required('The description  is required'),\n        category: Yup.string().required('The category  is required'),\n        date: Yup.string().required('Date  is required').nullable(),\n        city: Yup.string().required('The city  is required'),\n        venue: Yup.string().required('The venue  is required')\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\n    }, [id, loadActivity]);\n\n\n    function handleFormSubmit(activity: ActivityFormValues){\n        \n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    // function handleInputChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>){\n    //     const {name, value} = event.target;\n    //     setActivity({...activity, [name]: value});\n    // }\n\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity ...'/>\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit = {values => handleFormSubmit(values)} >\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description'  name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\n                        <MyDateInput \n                            placeholderText='Date'  \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'/>\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City'  name='city' />\n                        <MyTextInput placeholder='Venue'  name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} floated='right' \n                            positive type='submit' content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { Formik,Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n    const {commentStore} = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId])\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n            <Formik\n                onSubmit={(values, {resetForm}) => \n                    commentStore.addComment(values).then(() => resetForm())}\n                initialValues={{ body: ''}}\n                validationSchema={Yup.object({\n                        body: Yup.string().required()\n                })}\n            >\n                {({isSubmitting, isValid, handleSubmit}) => (\n                    <Form className='ui form' >\n                        <Field name='body'>\n                            {(props: FieldProps) => (\n                                <div style={{position: 'relative'}}>\n                                    <Loader active={isSubmitting} />\n                                    <textarea \n                                        placeholder='Enter your comment (Enter to submit, SHIFT + center for new line)'\n                                        rows={2}\n                                        {...props.field}\n                                        onKeyPress={e => {\n                                            if (e.key === 'Enter' && e.shiftKey) {\n                                                return;\n                                            }\n                                            if (e.key === 'Enter' && !e.shiftKey) {\n                                                e.preventDefault();\n                                                isValid && handleSubmit();\n                                            }\n                                        }}\n                                    />\n                                </div>\n                            )}\n                        </Field>\n                    </Form>\n                )}\n            </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                    \n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled && \n                    <Label style={{position:'absolute', zIndex: 1000, left: -14, top: 20}} />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy hh:mm aa')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basiccontent={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} \n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`} \n                            color='orange' \n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n                    \n                ) : activity.isGoing ? (\n                    <Button \n                    loading={loading} \n                    onClick={updateAttendance} >Cancel attendance</Button>\n                ) : (\n                    <Button \n                        disabled={activity.isCancelled}\n                        loading={loading} \n                        onClick={updateAttendance}  \n                        color='teal'>Join Activity\n                    </Button>\n                )}\n                \n            </Segment>\n        </Segment.Group>\n    )\n})\n\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n            {format(activity.date!, 'dd MMM yyyy hh:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\n\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n\n    if (!attendees) return null;\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username && \n                        <Label\n                            style={{ position: 'absolute' }}\n                            color='orange'\n                            ribbon='right'\n                        >\n                            Host\n                        </Label>}\n                        <Image size='tiny' src={ attendee.image || '/assets/user.png'} />\n                        <Item.Content verticalAlign='middle'>\n                            <Item.Header as='h3'>\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                            </Item.Header>\n                            {attendee.following &&\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                        </Item.Content>\n                        </Item>\n                    ))}\n                    \n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\n\nexport default observer(function ActivityDetails() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) \n        return <LoadingComponent content='Loading'/>;\n    \n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo  activity={activity}/>\n                <ActivityDetailedChat activityId={activity.id}/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity}/>\n            </Grid.Column>\n\n        </Grid>\n    )\n})","\nimport React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationError';\n\nexport default function TestErrors() {\n\n    //const baseUrl = 'http://localhost:5000/api/';\n    const baseUrl = process.env.REACT_APP_API_URL;\n    \n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors}/>\n                }\n        </>\n    )\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oop - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n            <Segment>\n                <Header as='h4' content='Stack trace' color='teal' />\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n            </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n    \n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"semantic-ui-react\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\n//import MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../app/common/form/myTextInput\";\n\ninterface Props {\n      setEditMode: (editMode: boolean) => void;\n}\n\n\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\nconst {profileStore: {profile, updateProfile}} = useStore();\nreturn (\n    <Formik\n        initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n        onSubmit={values => \n            {\n                updateProfile(values).then(() => {\n                setEditMode(false);\n                }) \n            }}\n        validationSchema={Yup.object({ \n            displayName: Yup.string().required()\n        })} >\n        {({isSubmitting, isValid, dirty}) => (\n            <Form className='ui form'>\n                <MyTextInput placeholder='Display Name' name='displayName' /> \n                <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                <Button\n                    positive\n                    type='submit'\n                    loading={isSubmitting}\n                    content='Update profile'\n                    floated='right'\n                    disabled={!isValid || !dirty}\n                    /> \n            </Form>\n        )} \n    </Formik>\n    ) \n})","import React, {useState} from 'react';\nimport {useStore} from \"../../app/stores/store\";\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\nimport ProfileEditForm from \"./ProfileEditForm\";\nimport { observer } from 'mobx-react-lite';\n\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                        floated='right'\n                        basic\n                        content={editMode ? 'Cancel' : 'Edit Profile'}\n                        onClick={() => setEditMode(!editMode)}\n                        /> )\n                    }\n                 </Grid.Column>\n                 <Grid.Column width='16'>\n                     {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\n                    <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                 </Grid.Column>\n             </Grid>\n        </Tab.Pane>\n     )\n})","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nexport default observer(function ProfileActivities() {\n    const \n    { profileStore } = useStore();\n    const \n    {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => \n    {\n        loadUserActivities(profile!.username);\n    },  [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => \n    {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities} >\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                            as={Link}\n                            to={`/activities/${activity.id}`}\n                            key={activity.id} >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit:'cover' }} />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'> {activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card> ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    ); \n});\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileCard from \"./ProfileCard\";\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                    <Grid.Column width={16}>\n                        <Header \n                            floated='left' \n                            icon='user'\n                            content={activeTab ===3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\n                    </Grid.Column>\n                    <Grid.Column width={16}>\n                        <Card.Group itemsPerRow={4} >\n                            {followings.map(profile => (\n                                <ProfileCard key={profile.username} profile={profile} />\n                            ))}\n                        </Card.Group>\n\n                    </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n        )\n    \n})","import React from \"react\";\nimport {Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio = {1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        // Do something with the files\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n\n    const {getRootProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n        <Icon name='upload' size='huge' />\n        <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Header } from \"semantic-ui-react\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\n//import {Cropper } from 'react-cropper';\n\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect (() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                { files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                { files && files.length > 0 && \n                <>\n                <div className='img-preview' style={{minHeight:200, overflow: 'hidden'}} />\n                <Button.Group widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check' />\n                    <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent, useState } from \"react\";\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\nimport { Photo, Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({profile}: Props) {\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const  [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic \n                            content={addPhotoMode ? 'Cancel' : 'Add photo'} \n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16} >\n                        {addPhotoMode ? (\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\n                        ) : (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid width={2}>\n                                            <Button \n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n                                            <Button basic color='red' \n                                                icon='trash' \n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                disabled={photo.isMain}\n                                                name={photo.id}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileAbout from \"./ProfileAbout\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfilePhotos from \"./ProfilePhotos\";\n\ninterface Props {\n    profile: Profile;\n}\nexport default observer(function ProfileContent({profile}: Props) {\n\n    const {profileStore} = useStore();\n    \n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ]\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                    <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column  width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n                \n        </Segment>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\nexport default observer(function ProfilePage() {\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n    \n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                    {profile && \n                    <>\n                        <ProfileHeader profile={profile}/>\n                        <ProfileContent profile={profile}/>\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) \n{\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n\n        />\n    )\n\n}","\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/detail/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/Profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading App...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage}/>\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n          <NavBar/>\n          <Container style={{marginTop: '7em'}}>  \n            <Switch>\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n              <PrivateRoute path='/errors' component={TestErrors} />\n              <Route path='/server-error' component={ServerError} />\n              <Route component={NotFound} />\n            </Switch>\n          </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport { store, StoreContext } from './app/stores/store';\nimport {Router} from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}